// Generated by Haxe 4.0.0-rc.2+77068e10c
(function () { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
};
var echos_Workflow = function() { };
echos_Workflow.__name__ = true;
echos_Workflow.regComponentContainer = function(cc) {
	echos_Workflow.__componentContainers.push(cc);
};
echos_Workflow.toString = function() {
	var ret = "# ( " + echos_Workflow.systems.length + " ) { " + echos_Workflow.views.length + " } [ " + echos_Workflow.entities.length + " | " + echos_Workflow.cache.length + " ]";
	var _this = echos_Workflow.times;
	ret += " : " + (__map_reserved["total"] != null ? _this.getReserved("total") : _this.h["total"]) + " ms";
	var _g_head = echos_Workflow.systems.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var ret1 = "\n        (" + Std.string(val) + ") : ";
		var key = val.toString();
		var _this1 = echos_Workflow.times;
		ret += ret1 + (__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]) + " ms";
	}
	var _g1_head = echos_Workflow.views.h;
	while(_g1_head != null) {
		var val1 = _g1_head.item;
		_g1_head = _g1_head.next;
		ret += "\n    {" + Std.string(val1) + "} [" + val1.entities.length + "]";
	}
	return ret;
};
echos_Workflow.update = function(dt) {
	var engineUpdateStartTimestamp = new Date().getTime();
	var _g_head = echos_Workflow.systems.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var systemUpdateStartTimestamp = new Date().getTime();
		val.__update(dt);
		var this1 = echos_Workflow.times;
		var key = val.toString();
		var value = new Date().getTime() - systemUpdateStartTimestamp | 0;
		var _this = this1;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
	var this11 = echos_Workflow.times;
	var value1 = new Date().getTime() - engineUpdateStartTimestamp | 0;
	var _this1 = this11;
	if(__map_reserved["total"] != null) {
		_this1.setReserved("total",value1);
	} else {
		_this1.h["total"] = value1;
	}
};
echos_Workflow.addSystem = function(s) {
	if(!echos_Workflow.hasSystem(s)) {
		echos_Workflow.systems.add(s);
		s.__activate();
	}
};
echos_Workflow.hasSystem = function(s) {
	var _g_head = echos_Workflow.systems.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		if(val == s) {
			return true;
		}
	}
	return false;
};
echos_Workflow.id = function(immediate) {
	var id = echos_Workflow.cache.length > 0 ? echos_Workflow.cache.pop() : echos_Workflow.__nextEntityId++;
	if(immediate) {
		echos_Workflow.statuses.h[id] = 1;
		echos_Workflow.entities.add(id);
	} else {
		echos_Workflow.statuses.h[id] = 0;
	}
	return id;
};
echos_Workflow.free = function(id) {
	if((echos_Workflow.statuses.h.hasOwnProperty(id) ? echos_Workflow.statuses.h[id] : 3) < 2) {
		echos_Workflow.remove(id);
		var _g = 0;
		var _g1 = echos_Workflow.__componentContainers;
		while(_g < _g1.length) _g1[_g++].remove(id);
		echos_Workflow.cache.push(id);
		echos_Workflow.statuses.h[id] = 2;
	}
};
echos_Workflow.remove = function(id) {
	if((echos_Workflow.statuses.h.hasOwnProperty(id) ? echos_Workflow.statuses.h[id] : 3) == 1) {
		var _g_head = echos_Workflow.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.removeIfMatch(id);
		}
		echos_Workflow.entities.remove(id);
		echos_Workflow.statuses.h[id] = 0;
	}
};
var ComponentContainer_$Main_$Animal = function() {
	this.components = echos_macro__$ComponentMacro_IntMapComponentContainer_$Impl_$._new();
	echos_Workflow.regComponentContainer(this.components);
};
ComponentContainer_$Main_$Animal.__name__ = true;
ComponentContainer_$Main_$Animal.inst = function() {
	return ComponentContainer_$Main_$Animal.instance;
};
var ComponentContainer_$Main_$Effect = function() {
	this.components = echos_macro__$ComponentMacro_IntMapComponentContainer_$Impl_$._new();
	echos_Workflow.regComponentContainer(this.components);
};
ComponentContainer_$Main_$Effect.__name__ = true;
ComponentContainer_$Main_$Effect.inst = function() {
	return ComponentContainer_$Main_$Effect.instance;
};
var ComponentContainer_$Main_$Position = function() {
	this.components = echos_macro__$ComponentMacro_IntMapComponentContainer_$Impl_$._new();
	echos_Workflow.regComponentContainer(this.components);
};
ComponentContainer_$Main_$Position.__name__ = true;
ComponentContainer_$Main_$Position.inst = function() {
	return ComponentContainer_$Main_$Position.instance;
};
var ComponentContainer_$Main_$Sprite = function() {
	this.components = echos_macro__$ComponentMacro_IntMapComponentContainer_$Impl_$._new();
	echos_Workflow.regComponentContainer(this.components);
};
ComponentContainer_$Main_$Sprite.__name__ = true;
ComponentContainer_$Main_$Sprite.inst = function() {
	return ComponentContainer_$Main_$Sprite.instance;
};
var ComponentContainer_$Main_$Velocity = function() {
	this.components = echos_macro__$ComponentMacro_IntMapComponentContainer_$Impl_$._new();
	echos_Workflow.regComponentContainer(this.components);
};
ComponentContainer_$Main_$Velocity.__name__ = true;
ComponentContainer_$Main_$Velocity.inst = function() {
	return ComponentContainer_$Main_$Velocity.instance;
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var canvas = window.document.createElement("div");
	canvas.classList.add("meatdow");
	var info = window.document.createElement("pre");
	info.classList.add("info");
	window.document.body.appendChild(canvas);
	window.document.body.appendChild(info);
	Main.SIZE = Std.parseInt(window.getComputedStyle(canvas).fontSize);
	var w = Math.floor(window.innerWidth / Main.SIZE);
	var h = Math.floor(window.innerHeight / Main.SIZE);
	var population = Math.max(w * h / 50,10) | 0;
	echos_Workflow.addSystem(new Play());
	echos_Workflow.addSystem(new Movement(w,h));
	echos_Workflow.addSystem(new Render(w,h,Main.SIZE,canvas));
	echos_Workflow.addSystem(new Effects());
	echos_Workflow.addSystem(new Info(info));
	var _g = 0;
	while(_g < h) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < w) {
			var x = _g1++;
			if(Math.random() < .75) {
				Main.grass(x,y);
			} else if(Math.random() < .25) {
				Main.tree(x,y);
			} else {
				Main.flower(x,y);
			}
		}
	}
	var _g2 = 0;
	while(_g2 < population) {
		++_g2;
		Main.rabbit(Std.random(w),Std.random(h));
	}
	Main.tiger(Std.random(w),Std.random(h));
	var fps = 60;
	window.setInterval(function() {
		echos_Workflow.update(fps / 1000);
	},fps);
};
Main.grass = function(x,y) {
	var id = echos_Workflow.id(true);
	ComponentContainer_$Main_$Position.instance.components.h[id] = new Vec2(x,y);
	var _this = ComponentContainer_$Main_$Sprite.instance;
	var value = Main.getRandomEmoji(Main.GRASS);
	var this1 = window.document.createElement("span");
	this1.style.position = "absolute";
	this1.style.right = "0px";
	this1.style.bottom = "0px";
	this1.style.fontSize = "125%";
	this1.innerHTML = value;
	_this.components.h[id] = this1;
	if((echos_Workflow.statuses.h.hasOwnProperty(id) ? echos_Workflow.statuses.h[id] : 3) == 1) {
		var _g_head = echos_Workflow.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(id);
		}
	}
};
Main.tree = function(x,y) {
	var id = echos_Workflow.id(true);
	ComponentContainer_$Main_$Position.instance.components.h[id] = new Vec2(x,y);
	var _this = ComponentContainer_$Main_$Sprite.instance;
	var value = Main.getRandomEmoji(Main.TREE);
	var this1 = window.document.createElement("span");
	this1.style.position = "absolute";
	this1.style.right = "0px";
	this1.style.bottom = "0px";
	this1.style.fontSize = "175%";
	this1.innerHTML = value;
	_this.components.h[id] = this1;
	if((echos_Workflow.statuses.h.hasOwnProperty(id) ? echos_Workflow.statuses.h[id] : 3) == 1) {
		var _g_head = echos_Workflow.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(id);
		}
	}
};
Main.flower = function(x,y) {
	var id = echos_Workflow.id(true);
	ComponentContainer_$Main_$Position.instance.components.h[id] = new Vec2(x,y);
	var _this = ComponentContainer_$Main_$Sprite.instance;
	var value = Main.getRandomEmoji(Main.FLOWER);
	var this1 = window.document.createElement("span");
	this1.style.position = "absolute";
	this1.style.right = "0px";
	this1.style.bottom = "0px";
	this1.style.fontSize = "125%";
	this1.innerHTML = value;
	_this.components.h[id] = this1;
	if((echos_Workflow.statuses.h.hasOwnProperty(id) ? echos_Workflow.statuses.h[id] : 3) == 1) {
		var _g_head = echos_Workflow.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(id);
		}
	}
};
Main.rabbit = function(x,y) {
	var entity = echos_Workflow.id(true);
	var this1 = new Vec2(x,y);
	var vel = Main.getRandomVelocity(1);
	var this2 = window.document.createElement("span");
	this2.style.position = "absolute";
	this2.style.right = "0px";
	this2.style.bottom = "0px";
	this2.style.fontSize = "100%";
	this2.innerHTML = "🐇";
	ComponentContainer_$Main_$Position.instance.components.h[entity] = this1;
	ComponentContainer_$Main_$Velocity.instance.components.h[entity] = vel;
	ComponentContainer_$Main_$Sprite.instance.components.h[entity] = this2;
	ComponentContainer_$Main_$Animal.instance.components.h[entity] = Animal.Rabbit(entity);
	if((echos_Workflow.statuses.h.hasOwnProperty(entity) ? echos_Workflow.statuses.h[entity] : 3) == 1) {
		var _g_head = echos_Workflow.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(entity);
		}
	}
	return entity;
};
Main.tiger = function(x,y) {
	var this1 = new Vec2(x,y);
	var vel = Main.getRandomVelocity(10);
	var this2 = window.document.createElement("span");
	this2.style.position = "absolute";
	this2.style.right = "0px";
	this2.style.bottom = "0px";
	this2.style.fontSize = "150%";
	this2.innerHTML = "🐅";
	var id = echos_Workflow.id(true);
	ComponentContainer_$Main_$Position.instance.components.h[id] = this1;
	ComponentContainer_$Main_$Velocity.instance.components.h[id] = vel;
	ComponentContainer_$Main_$Sprite.instance.components.h[id] = this2;
	ComponentContainer_$Main_$Animal.instance.components.h[id] = Animal.Tiger;
	if((echos_Workflow.statuses.h.hasOwnProperty(id) ? echos_Workflow.statuses.h[id] : 3) == 1) {
		var _g_head = echos_Workflow.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(id);
		}
	}
	return id;
};
Main.loveEvent = function(x,y) {
	var id = echos_Workflow.id(true);
	ComponentContainer_$Main_$Position.instance.components.h[id] = new Vec2(x,y);
	var _this = ComponentContainer_$Main_$Sprite.instance;
	var this1 = window.document.createElement("span");
	this1.style.position = "absolute";
	this1.style.right = "0px";
	this1.style.bottom = "0px";
	this1.style.fontSize = "125%";
	this1.innerHTML = "💘";
	_this.components.h[id] = this1;
	var _this1 = ComponentContainer_$Main_$Effect.instance;
	var c = new Effect(1.0,Main.getSizeAndOpacityTween(1.25,0.50,1.0,-0.75),null);
	_this1.components.h[id] = c;
	if((echos_Workflow.statuses.h.hasOwnProperty(id) ? echos_Workflow.statuses.h[id] : 3) == 1) {
		var _g_head = echos_Workflow.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(id);
		}
	}
};
Main.deathEvent = function(x,y) {
	var reborn = function(e) {
		var id = Main.rabbit(ComponentContainer_$Main_$Position.instance.components.h[e].x,ComponentContainer_$Main_$Position.instance.components.h[e].y);
		var _this = ComponentContainer_$Main_$Effect.instance;
		var c = new Effect(1.0,Main.getOpacityTween(0,1.0),null,false);
		_this.components.h[id] = c;
		if((echos_Workflow.statuses.h.hasOwnProperty(id) ? echos_Workflow.statuses.h[id] : 3) == 1) {
			var _g_head = echos_Workflow.views.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				val.addIfMatch(id);
			}
		}
		return id;
	};
	var id1 = echos_Workflow.id(true);
	var _this1 = ComponentContainer_$Main_$Velocity.instance;
	var c1 = Main.getRandomVelocity(2);
	_this1.components.h[id1] = c1;
	ComponentContainer_$Main_$Position.instance.components.h[id1] = new Vec2(x,y);
	var _this2 = ComponentContainer_$Main_$Sprite.instance;
	var this1 = window.document.createElement("span");
	this1.style.position = "absolute";
	this1.style.right = "0px";
	this1.style.bottom = "0px";
	this1.style.fontSize = "125%";
	this1.innerHTML = "👻";
	_this2.components.h[id1] = this1;
	var _this3 = ComponentContainer_$Main_$Effect.instance;
	var c2 = new Effect(5.0,Main.getSizeAndOpacityTween(1.15,0.10,1.0,-0.75),reborn);
	_this3.components.h[id1] = c2;
	if((echos_Workflow.statuses.h.hasOwnProperty(id1) ? echos_Workflow.statuses.h[id1] : 3) == 1) {
		var _g_head1 = echos_Workflow.views.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			val1.addIfMatch(id1);
		}
	}
	var id2 = echos_Workflow.id(true);
	ComponentContainer_$Main_$Position.instance.components.h[id2] = new Vec2(x,y);
	var _this4 = ComponentContainer_$Main_$Sprite.instance;
	var this2 = window.document.createElement("span");
	this2.style.position = "absolute";
	this2.style.right = "0px";
	this2.style.bottom = "0px";
	this2.style.fontSize = "150%";
	this2.innerHTML = "💥";
	_this4.components.h[id2] = this2;
	var _this5 = ComponentContainer_$Main_$Effect.instance;
	var c3 = new Effect(1.0,Main.getOpacityTween(1.0,-0.75),null);
	_this5.components.h[id2] = c3;
	if((echos_Workflow.statuses.h.hasOwnProperty(id2) ? echos_Workflow.statuses.h[id2] : 3) == 1) {
		var _g_head2 = echos_Workflow.views.h;
		while(_g_head2 != null) {
			var val2 = _g_head2.item;
			_g_head2 = _g_head2.next;
			val2.addIfMatch(id2);
		}
	}
	var dx = 1 - Std.random(3);
	var dy = 1 - Std.random(3);
	var id3 = echos_Workflow.id(true);
	ComponentContainer_$Main_$Position.instance.components.h[id3] = new Vec2(x + dx,y + dy);
	var _this6 = ComponentContainer_$Main_$Sprite.instance;
	var value = Main.getRandomEmoji(Main.MEAT);
	var this3 = window.document.createElement("span");
	this3.style.position = "absolute";
	this3.style.right = "0px";
	this3.style.bottom = "0px";
	this3.style.fontSize = "100%";
	this3.innerHTML = value;
	_this6.components.h[id3] = this3;
	var _this7 = ComponentContainer_$Main_$Effect.instance;
	var c4 = new Effect(7.0,Main.getOpacityTween(1.0,-0.75),null);
	_this7.components.h[id3] = c4;
	if((echos_Workflow.statuses.h.hasOwnProperty(id3) ? echos_Workflow.statuses.h[id3] : 3) == 1) {
		var _g_head3 = echos_Workflow.views.h;
		while(_g_head3 != null) {
			var val3 = _g_head3.item;
			_g_head3 = _g_head3.next;
			val3.addIfMatch(id3);
		}
	}
	var dx1 = 1 - Std.random(3);
	var dy1 = 1 - Std.random(3);
	var id4 = echos_Workflow.id(true);
	ComponentContainer_$Main_$Position.instance.components.h[id4] = new Vec2(x + dx1,y + dy1);
	var _this8 = ComponentContainer_$Main_$Sprite.instance;
	var value1 = Main.getRandomEmoji(Main.MEAT);
	var this4 = window.document.createElement("span");
	this4.style.position = "absolute";
	this4.style.right = "0px";
	this4.style.bottom = "0px";
	this4.style.fontSize = "100%";
	this4.innerHTML = value1;
	_this8.components.h[id4] = this4;
	var _this9 = ComponentContainer_$Main_$Effect.instance;
	var c5 = new Effect(7.0,Main.getOpacityTween(1.0,-0.75),null);
	_this9.components.h[id4] = c5;
	if((echos_Workflow.statuses.h.hasOwnProperty(id4) ? echos_Workflow.statuses.h[id4] : 3) == 1) {
		var _g_head4 = echos_Workflow.views.h;
		while(_g_head4 != null) {
			var val4 = _g_head4.item;
			_g_head4 = _g_head4.next;
			val4.addIfMatch(id4);
		}
	}
	var dx2 = 1 - Std.random(3);
	var dy2 = 1 - Std.random(3);
	var id5 = echos_Workflow.id(true);
	ComponentContainer_$Main_$Position.instance.components.h[id5] = new Vec2(x + dx2,y + dy2);
	var _this10 = ComponentContainer_$Main_$Sprite.instance;
	var value2 = Main.getRandomEmoji(Main.MEAT);
	var this5 = window.document.createElement("span");
	this5.style.position = "absolute";
	this5.style.right = "0px";
	this5.style.bottom = "0px";
	this5.style.fontSize = "100%";
	this5.innerHTML = value2;
	_this10.components.h[id5] = this5;
	var _this11 = ComponentContainer_$Main_$Effect.instance;
	var c6 = new Effect(7.0,Main.getOpacityTween(1.0,-0.75),null);
	_this11.components.h[id5] = c6;
	if((echos_Workflow.statuses.h.hasOwnProperty(id5) ? echos_Workflow.statuses.h[id5] : 3) == 1) {
		var _g_head5 = echos_Workflow.views.h;
		while(_g_head5 != null) {
			var val5 = _g_head5.item;
			_g_head5 = _g_head5.next;
			val5.addIfMatch(id5);
		}
	}
};
Main.getRandomEmoji = function(codes) {
	return codes[Std.random(codes.length)];
};
Main.getRandomVelocity = function(speed) {
	var d = Math.random() * Math.PI * 2;
	return new Vec2(Math.cos(d) * speed,Math.sin(d) * speed);
};
Main.getOpacityTween = function(from,delta) {
	return function(e,t) {
		_$Main_Sprite_$Impl_$.setOpacity(ComponentContainer_$Main_$Sprite.instance.components.h[e],from + t * delta);
		return;
	};
};
Main.getSizeTween = function(from,delta) {
	return function(e,t) {
		_$Main_Sprite_$Impl_$.setSize(ComponentContainer_$Main_$Sprite.instance.components.h[e],from + t * delta);
		return;
	};
};
Main.getSizeAndOpacityTween = function(fromSize,deltaSize,fromOpacity,deltaOpacity) {
	var t1 = Main.getSizeTween(fromSize,deltaSize);
	var t2 = Main.getOpacityTween(fromOpacity,deltaOpacity);
	return function(e,t) {
		t1(e,t);
		t2(e,t);
		return;
	};
};
var Vec2 = function(x,y) {
	this.x = x != null ? x : .0;
	this.y = y != null ? y : .0;
};
Vec2.__name__ = true;
var _$Main_Sprite_$Impl_$ = {};
_$Main_Sprite_$Impl_$.__name__ = true;
_$Main_Sprite_$Impl_$.setOpacity = function(this1,value) {
	this1.style.opacity = "" + value;
};
_$Main_Sprite_$Impl_$.setSize = function(this1,value) {
	this1.style.fontSize = "" + (value * 100 | 0) + "%";
};
var Animal = $hxEnums["Animal"] = { __ename__ : true, __constructs__ : ["Rabbit","Tiger"]
	,Rabbit: ($_=function(lastlove) { return {_hx_index:0,lastlove:lastlove,__enum__:"Animal",toString:$estr}; },$_.__params__ = ["lastlove"],$_)
	,Tiger: {_hx_index:1,__enum__:"Animal",toString:$estr}
};
var Effect = function(timeout,onUpdate,onComplete,destroy) {
	if(destroy == null) {
		destroy = true;
	}
	this.time = .0;
	this.timeout = timeout;
	this.onUpdate = onUpdate;
	this.onComplete = onComplete;
	this.destroy = destroy;
};
Effect.__name__ = true;
var echos_System = function() { };
echos_System.__name__ = true;
echos_System.prototype = {
	__activate: function() {
	}
	,__update: function(dt) {
	}
	,toString: function() {
		return "System";
	}
};
var Info = function(element) {
	this.element = element;
};
Info.__name__ = true;
Info.__super__ = echos_System;
Info.prototype = $extend(echos_System.prototype,{
	print: function() {
		var tmp = "EATEN: " + Info.eaten + "\n\n";
		var tmp1 = echos_Workflow.toString();
		this.element.innerHTML = tmp + tmp1;
	}
	,__update: function(dt) {
		this.print();
	}
	,__activate: function() {
	}
	,toString: function() {
		return "Main.Info";
	}
});
var Movement = function(w,h) {
	this.view_main_position_main_velocity = View_$Main_$Position_$Main_$Velocity.instance;
	this.w = w;
	this.h = h;
};
Movement.__name__ = true;
Movement.__super__ = echos_System;
Movement.prototype = $extend(echos_System.prototype,{
	__update: function(dt) {
		var _gthis = this;
		var _this = this.view_main_position_main_velocity;
		_this.iterating = true;
		var _g = 0;
		var _g1 = _this.entities;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var pos = ComponentContainer_$Main_$Position.instance.components.h[e];
			var vel = ComponentContainer_$Main_$Velocity.instance.components.h[e];
			var dx = vel.x * dt;
			var dy = vel.y * dt;
			if(pos.x + dx > _gthis.w - 1 || pos.x + dx < 0) {
				vel.x *= -1;
			}
			if(pos.y + dy > _gthis.h - 1 || pos.y + dy < 0) {
				vel.y *= -1;
			}
			pos.x += dx;
			pos.y += dy;
		}
		while(_this.incomplete.length > 0) {
			var id = _this.incomplete.pop();
			switch(_this.statuses.h.hasOwnProperty(id) ? _this.statuses.h[id] : 0) {
			case 1:
				_this.statuses.remove(id);
				HxOverrides.remove(_this.entities,id);
				break;
			case 2:
				_this.statuses.h[id] = 4;
				_this.entities.push(id);
				break;
			case 3:
				_this.statuses.h[id] = 4;
				break;
			default:
			}
		}
		_this.iterating = false;
	}
	,__activate: function() {
		this.view_main_position_main_velocity.activate();
	}
	,toString: function() {
		return "Main.Movement";
	}
});
var Render = function(w,h,SIZE,canvas) {
	this.view_main_position_main_sprite_main_velocity = View_$Main_$Position_$Main_$Sprite_$Main_$Velocity.instance;
	this.view_main_position_main_sprite = View_$Main_$Position_$Main_$Sprite.instance;
	this.world = [];
	this.w = w;
	this.h = h;
	var _g = 0;
	while(_g < h) {
		var y = _g++;
		this.world[y] = [];
		var _g1 = 0;
		while(_g1 < w) {
			var x = _g1++;
			var span = window.document.createElement("span");
			span.style.position = "absolute";
			span.style.left = "" + (x + 1) * SIZE + "px";
			span.style.top = "" + (y + 1) * SIZE + "px";
			this.world[y][x] = span;
			canvas.appendChild(span);
		}
		canvas.appendChild(window.document.createElement("br"));
	}
};
Render.__name__ = true;
Render.__super__ = echos_System;
Render.prototype = $extend(echos_System.prototype,{
	__update: function(dt) {
		var _gthis = this;
		var _this = this.view_main_position_main_sprite_main_velocity;
		_this.iterating = true;
		var _g = 0;
		var _g1 = _this.entities;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var pos = ComponentContainer_$Main_$Position.instance.components.h[e];
			_gthis.world[pos.y | 0][pos.x | 0].appendChild(ComponentContainer_$Main_$Sprite.instance.components.h[e]);
		}
		while(_this.incomplete.length > 0) {
			var id = _this.incomplete.pop();
			switch(_this.statuses.h.hasOwnProperty(id) ? _this.statuses.h[id] : 0) {
			case 1:
				_this.statuses.remove(id);
				HxOverrides.remove(_this.entities,id);
				break;
			case 2:
				_this.statuses.h[id] = 4;
				_this.entities.push(id);
				break;
			case 3:
				_this.statuses.h[id] = 4;
				break;
			default:
			}
		}
		_this.iterating = false;
	}
	,__activate: function() {
		var _gthis = this;
		this.__appendSprite = function(id,pos,spr) {
			pos.x = Math.max(0,Math.min(_gthis.w - 1,pos.x));
			pos.y = Math.max(0,Math.min(_gthis.h - 1,pos.y));
			_gthis.world[pos.y | 0][pos.x | 0].appendChild(spr);
		};
		this.__detachSprite = function(id1,pos1,spr1) {
			spr1.remove();
		};
		this.view_main_position_main_sprite.activate();
		this.view_main_position_main_sprite_main_velocity.activate();
		this.view_main_position_main_sprite.onAdded.push(this.__appendSprite);
		this.view_main_position_main_sprite.onRemoved.push(this.__detachSprite);
		var _this = this.view_main_position_main_sprite;
		var f = this.__appendSprite;
		_this.iterating = true;
		var _g = 0;
		var _g1 = _this.entities;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			f(e,ComponentContainer_$Main_$Position.instance.components.h[e],ComponentContainer_$Main_$Sprite.instance.components.h[e]);
		}
		while(_this.incomplete.length > 0) {
			var id2 = _this.incomplete.pop();
			switch(_this.statuses.h.hasOwnProperty(id2) ? _this.statuses.h[id2] : 0) {
			case 1:
				_this.statuses.remove(id2);
				HxOverrides.remove(_this.entities,id2);
				break;
			case 2:
				_this.statuses.h[id2] = 4;
				_this.entities.push(id2);
				break;
			case 3:
				_this.statuses.h[id2] = 4;
				break;
			default:
			}
		}
		_this.iterating = false;
	}
	,toString: function() {
		return "Main.Render";
	}
});
var Play = function() {
	this.animals = View_$Main_$Animal_$Main_$Position.instance;
	this.del = [];
};
Play.__name__ = true;
Play.__super__ = echos_System;
Play.prototype = $extend(echos_System.prototype,{
	eats: function(tiger,rabbit) {
		console.log("example/Main.hx:372:","#" + tiger + " eats #" + rabbit);
		Main.deathEvent(ComponentContainer_$Main_$Position.instance.components.h[rabbit].x,ComponentContainer_$Main_$Position.instance.components.h[rabbit].y);
		this.del.push(rabbit);
		Info.eaten++;
	}
	,test: function(pos1,pos2,radius) {
		var dx = pos2.x - pos1.x;
		var dy = pos2.y - pos1.y;
		return dx * dx + dy * dy < radius * radius;
	}
	,__update: function(dt) {
		var _g = 0;
		var _g1 = this.animals.entities.length;
		while(_g < _g1) {
			var i1 = _g++;
			var id1 = this.animals.entities[i1];
			var a1 = ComponentContainer_$Main_$Animal.instance.components.h[id1];
			var pos1 = ComponentContainer_$Main_$Position.instance.components.h[id1];
			var _g2 = i1 + 1;
			var _g11 = this.animals.entities.length;
			while(_g2 < _g11) {
				var id2 = this.animals.entities[_g2++];
				var a2 = ComponentContainer_$Main_$Animal.instance.components.h[id2];
				var pos2 = ComponentContainer_$Main_$Position.instance.components.h[id2];
				if(this.test(pos1,pos2,1.41)) {
					switch(a1._hx_index) {
					case 0:
						var lastlove1 = a1.lastlove;
						switch(a2._hx_index) {
						case 0:
							if(id1 != a2.lastlove && id2 != lastlove1) {
								Main.loveEvent((pos1.x + pos2.x) / 2,(pos1.y + pos2.y) / 2);
								ComponentContainer_$Main_$Animal.instance.components.h[id1] = Animal.Rabbit(id2);
								if((echos_Workflow.statuses.h.hasOwnProperty(id1) ? echos_Workflow.statuses.h[id1] : 3) == 1) {
									var _g_head = echos_Workflow.views.h;
									while(_g_head != null) {
										var val = _g_head.item;
										_g_head = _g_head.next;
										val.addIfMatch(id1);
									}
								}
								ComponentContainer_$Main_$Animal.instance.components.h[id2] = Animal.Rabbit(id1);
								if((echos_Workflow.statuses.h.hasOwnProperty(id2) ? echos_Workflow.statuses.h[id2] : 3) == 1) {
									var _g_head1 = echos_Workflow.views.h;
									while(_g_head1 != null) {
										var val1 = _g_head1.item;
										_g_head1 = _g_head1.next;
										val1.addIfMatch(id2);
									}
								}
							}
							break;
						case 1:
							this.eats(id2,id1);
							break;
						}
						break;
					case 1:
						if(a2._hx_index == 0) {
							this.eats(id1,id2);
						}
						break;
					}
				}
			}
		}
		while(this.del.length > 0) echos__$Entity_Entity_$Impl_$.destroy(this.del.pop());
	}
	,__activate: function() {
		this.animals.activate();
	}
	,toString: function() {
		return "Main.Play";
	}
});
var Effects = function() {
	this.view_main_effect = View_$Main_$Effect.instance;
};
Effects.__name__ = true;
Effects.__super__ = echos_System;
Effects.prototype = $extend(echos_System.prototype,{
	update: function(id,ef,dt) {
		ef.time += dt;
		if(ef.time < ef.timeout) {
			if(ef.onUpdate != null) {
				ef.onUpdate(id,ef.time / ef.timeout);
			}
		} else {
			if(ef.onUpdate != null) {
				ef.onUpdate(id,1.0);
			}
			if(ef.onComplete != null) {
				ef.onComplete(id);
			}
			if(ef.destroy) {
				echos__$Entity_Entity_$Impl_$.destroy(id);
			} else {
				if((echos_Workflow.statuses.h.hasOwnProperty(id) ? echos_Workflow.statuses.h[id] : 3) == 1) {
					var _g_head = echos_Workflow.views.h;
					while(_g_head != null) {
						var val = _g_head.item;
						_g_head = _g_head.next;
						if(val.isRequire(0)) {
							val.removeIfMatch(id);
						}
					}
				}
				ComponentContainer_$Main_$Effect.instance.components.remove(id);
			}
		}
	}
	,__update: function(dt) {
		var _gthis = this;
		var _this = this.view_main_effect;
		_this.iterating = true;
		var _g = 0;
		var _g1 = _this.entities;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			_gthis.update(e,ComponentContainer_$Main_$Effect.instance.components.h[e],dt);
		}
		while(_this.incomplete.length > 0) {
			var id = _this.incomplete.pop();
			switch(_this.statuses.h.hasOwnProperty(id) ? _this.statuses.h[id] : 0) {
			case 1:
				_this.statuses.remove(id);
				HxOverrides.remove(_this.entities,id);
				break;
			case 2:
				_this.statuses.h[id] = 4;
				_this.entities.push(id);
				break;
			case 3:
				_this.statuses.h[id] = 4;
				break;
			default:
			}
		}
		_this.iterating = false;
	}
	,__activate: function() {
		this.__add = function(id,ef) {
			if(ef.onUpdate != null) {
				ef.onUpdate(id,0.0);
			}
		};
		this.view_main_effect.activate();
		this.view_main_effect.onAdded.push(this.__add);
		var _this = this.view_main_effect;
		var f = this.__add;
		_this.iterating = true;
		var _g = 0;
		var _g1 = _this.entities;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			f(e,ComponentContainer_$Main_$Effect.instance.components.h[e]);
		}
		while(_this.incomplete.length > 0) {
			var id1 = _this.incomplete.pop();
			switch(_this.statuses.h.hasOwnProperty(id1) ? _this.statuses.h[id1] : 0) {
			case 1:
				_this.statuses.remove(id1);
				HxOverrides.remove(_this.entities,id1);
				break;
			case 2:
				_this.statuses.h[id1] = 4;
				_this.entities.push(id1);
				break;
			case 3:
				_this.statuses.h[id1] = 4;
				break;
			default:
			}
		}
		_this.iterating = false;
	}
	,toString: function() {
		return "Main.Effects";
	}
});
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var echos_ViewBase = function() {
	this.entities = [];
	this.statuses = new haxe_ds_IntMap();
	this.incomplete = [];
	this.iterating = false;
};
echos_ViewBase.__name__ = true;
echos_ViewBase.prototype = {
	activate: function() {
		if(!this.isActive()) {
			echos_Workflow.views.add(this);
			var _g_head = echos_Workflow.entities.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				this.addIfMatch(val);
			}
		}
	}
	,isActive: function() {
		var _g_head = echos_Workflow.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			if(val == this) {
				return true;
			}
		}
		return false;
	}
	,isMatch: function(id) {
		return false;
	}
	,isRequire: function(c) {
		return false;
	}
	,add: function(id) {
		if(this.iterating) {
			var status = this.statuses.h.hasOwnProperty(id) ? this.statuses.h[id] : 0;
			this.statuses.h[id] = status == 1 ? 3 : 2;
			if(this.incomplete.indexOf(id) == -1) {
				this.incomplete.push(id);
			}
		} else {
			this.statuses.h[id] = 4;
			this.entities.push(id);
		}
	}
	,remove: function(id) {
		if(this.iterating) {
			this.statuses.h[id] = 1;
			if(this.incomplete.indexOf(id) == -1) {
				this.incomplete.push(id);
			}
		} else {
			this.statuses.remove(id);
			HxOverrides.remove(this.entities,id);
		}
	}
	,addIfMatch: function(id) {
		if((this.statuses.h.hasOwnProperty(id) ? this.statuses.h[id] : 0) < 2 && this.isMatch(id)) {
			this.add(id);
		}
	}
	,removeIfMatch: function(id) {
		if((this.statuses.h.hasOwnProperty(id) ? this.statuses.h[id] : 0) > 1) {
			this.remove(id);
		}
	}
	,toString: function() {
		return "View";
	}
};
var View_$Main_$Animal_$Main_$Position = function() {
	this.onRemoved = [];
	this.onAdded = [];
	echos_ViewBase.call(this);
};
View_$Main_$Animal_$Main_$Position.__name__ = true;
View_$Main_$Animal_$Main_$Position.inst = function() {
	return View_$Main_$Animal_$Main_$Position.instance;
};
View_$Main_$Animal_$Main_$Position.__super__ = echos_ViewBase;
View_$Main_$Animal_$Main_$Position.prototype = $extend(echos_ViewBase.prototype,{
	add: function(id) {
		echos_ViewBase.prototype.add.call(this,id);
		var i = 0;
		var l = this.onAdded.length;
		while(i < l) {
			var listener = this.onAdded[i];
			if(listener != null) {
				listener(id,ComponentContainer_$Main_$Animal.instance.components.h[id],ComponentContainer_$Main_$Position.instance.components.h[id]);
				++i;
			} else {
				this.onAdded.splice(i,1);
				--l;
			}
		}
	}
	,remove: function(id) {
		var i = 0;
		var l = this.onRemoved.length;
		while(i < l) {
			var listener = this.onRemoved[i];
			if(listener != null) {
				listener(id,ComponentContainer_$Main_$Animal.instance.components.h[id],ComponentContainer_$Main_$Position.instance.components.h[id]);
				++i;
			} else {
				this.onRemoved.splice(i,1);
				--l;
			}
		}
		echos_ViewBase.prototype.remove.call(this,id);
	}
	,isMatch: function(id) {
		if(ComponentContainer_$Main_$Position.instance.components.h[id] != null) {
			return ComponentContainer_$Main_$Animal.instance.components.h[id] != null;
		} else {
			return false;
		}
	}
	,isRequire: function(c) {
		return View_$Main_$Animal_$Main_$Position.__mask.h[c] != null;
	}
	,toString: function() {
		return "Main.Animal,Main.Position";
	}
});
var View_$Main_$Effect = function() {
	this.onRemoved = [];
	this.onAdded = [];
	echos_ViewBase.call(this);
};
View_$Main_$Effect.__name__ = true;
View_$Main_$Effect.inst = function() {
	return View_$Main_$Effect.instance;
};
View_$Main_$Effect.__super__ = echos_ViewBase;
View_$Main_$Effect.prototype = $extend(echos_ViewBase.prototype,{
	add: function(id) {
		echos_ViewBase.prototype.add.call(this,id);
		var i = 0;
		var l = this.onAdded.length;
		while(i < l) {
			var listener = this.onAdded[i];
			if(listener != null) {
				listener(id,ComponentContainer_$Main_$Effect.instance.components.h[id]);
				++i;
			} else {
				this.onAdded.splice(i,1);
				--l;
			}
		}
	}
	,remove: function(id) {
		var i = 0;
		var l = this.onRemoved.length;
		while(i < l) {
			var listener = this.onRemoved[i];
			if(listener != null) {
				listener(id,ComponentContainer_$Main_$Effect.instance.components.h[id]);
				++i;
			} else {
				this.onRemoved.splice(i,1);
				--l;
			}
		}
		echos_ViewBase.prototype.remove.call(this,id);
	}
	,isMatch: function(id) {
		return ComponentContainer_$Main_$Effect.instance.components.h[id] != null;
	}
	,isRequire: function(c) {
		return View_$Main_$Effect.__mask.h[c] != null;
	}
	,toString: function() {
		return "Main.Effect";
	}
});
var View_$Main_$Position_$Main_$Sprite = function() {
	this.onRemoved = [];
	this.onAdded = [];
	echos_ViewBase.call(this);
};
View_$Main_$Position_$Main_$Sprite.__name__ = true;
View_$Main_$Position_$Main_$Sprite.inst = function() {
	return View_$Main_$Position_$Main_$Sprite.instance;
};
View_$Main_$Position_$Main_$Sprite.__super__ = echos_ViewBase;
View_$Main_$Position_$Main_$Sprite.prototype = $extend(echos_ViewBase.prototype,{
	add: function(id) {
		echos_ViewBase.prototype.add.call(this,id);
		var i = 0;
		var l = this.onAdded.length;
		while(i < l) {
			var listener = this.onAdded[i];
			if(listener != null) {
				listener(id,ComponentContainer_$Main_$Position.instance.components.h[id],ComponentContainer_$Main_$Sprite.instance.components.h[id]);
				++i;
			} else {
				this.onAdded.splice(i,1);
				--l;
			}
		}
	}
	,remove: function(id) {
		var i = 0;
		var l = this.onRemoved.length;
		while(i < l) {
			var listener = this.onRemoved[i];
			if(listener != null) {
				listener(id,ComponentContainer_$Main_$Position.instance.components.h[id],ComponentContainer_$Main_$Sprite.instance.components.h[id]);
				++i;
			} else {
				this.onRemoved.splice(i,1);
				--l;
			}
		}
		echos_ViewBase.prototype.remove.call(this,id);
	}
	,isMatch: function(id) {
		if(ComponentContainer_$Main_$Sprite.instance.components.h[id] != null) {
			return ComponentContainer_$Main_$Position.instance.components.h[id] != null;
		} else {
			return false;
		}
	}
	,isRequire: function(c) {
		return View_$Main_$Position_$Main_$Sprite.__mask.h[c] != null;
	}
	,toString: function() {
		return "Main.Position,Main.Sprite";
	}
});
var View_$Main_$Position_$Main_$Sprite_$Main_$Velocity = function() {
	this.onRemoved = [];
	this.onAdded = [];
	echos_ViewBase.call(this);
};
View_$Main_$Position_$Main_$Sprite_$Main_$Velocity.__name__ = true;
View_$Main_$Position_$Main_$Sprite_$Main_$Velocity.inst = function() {
	return View_$Main_$Position_$Main_$Sprite_$Main_$Velocity.instance;
};
View_$Main_$Position_$Main_$Sprite_$Main_$Velocity.__super__ = echos_ViewBase;
View_$Main_$Position_$Main_$Sprite_$Main_$Velocity.prototype = $extend(echos_ViewBase.prototype,{
	add: function(id) {
		echos_ViewBase.prototype.add.call(this,id);
		var i = 0;
		var l = this.onAdded.length;
		while(i < l) {
			var listener = this.onAdded[i];
			if(listener != null) {
				listener(id,ComponentContainer_$Main_$Velocity.instance.components.h[id],ComponentContainer_$Main_$Position.instance.components.h[id],ComponentContainer_$Main_$Sprite.instance.components.h[id]);
				++i;
			} else {
				this.onAdded.splice(i,1);
				--l;
			}
		}
	}
	,remove: function(id) {
		var i = 0;
		var l = this.onRemoved.length;
		while(i < l) {
			var listener = this.onRemoved[i];
			if(listener != null) {
				listener(id,ComponentContainer_$Main_$Velocity.instance.components.h[id],ComponentContainer_$Main_$Position.instance.components.h[id],ComponentContainer_$Main_$Sprite.instance.components.h[id]);
				++i;
			} else {
				this.onRemoved.splice(i,1);
				--l;
			}
		}
		echos_ViewBase.prototype.remove.call(this,id);
	}
	,isMatch: function(id) {
		if(ComponentContainer_$Main_$Sprite.instance.components.h[id] != null) {
			if(ComponentContainer_$Main_$Position.instance.components.h[id] != null) {
				return ComponentContainer_$Main_$Velocity.instance.components.h[id] != null;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,isRequire: function(c) {
		return View_$Main_$Position_$Main_$Sprite_$Main_$Velocity.__mask.h[c] != null;
	}
	,toString: function() {
		return "Main.Position,Main.Sprite,Main.Velocity";
	}
});
var View_$Main_$Position_$Main_$Velocity = function() {
	this.onRemoved = [];
	this.onAdded = [];
	echos_ViewBase.call(this);
};
View_$Main_$Position_$Main_$Velocity.__name__ = true;
View_$Main_$Position_$Main_$Velocity.inst = function() {
	return View_$Main_$Position_$Main_$Velocity.instance;
};
View_$Main_$Position_$Main_$Velocity.__super__ = echos_ViewBase;
View_$Main_$Position_$Main_$Velocity.prototype = $extend(echos_ViewBase.prototype,{
	add: function(id) {
		echos_ViewBase.prototype.add.call(this,id);
		var i = 0;
		var l = this.onAdded.length;
		while(i < l) {
			var listener = this.onAdded[i];
			if(listener != null) {
				listener(id,ComponentContainer_$Main_$Position.instance.components.h[id],ComponentContainer_$Main_$Velocity.instance.components.h[id]);
				++i;
			} else {
				this.onAdded.splice(i,1);
				--l;
			}
		}
	}
	,remove: function(id) {
		var i = 0;
		var l = this.onRemoved.length;
		while(i < l) {
			var listener = this.onRemoved[i];
			if(listener != null) {
				listener(id,ComponentContainer_$Main_$Position.instance.components.h[id],ComponentContainer_$Main_$Velocity.instance.components.h[id]);
				++i;
			} else {
				this.onRemoved.splice(i,1);
				--l;
			}
		}
		echos_ViewBase.prototype.remove.call(this,id);
	}
	,isMatch: function(id) {
		if(ComponentContainer_$Main_$Velocity.instance.components.h[id] != null) {
			return ComponentContainer_$Main_$Position.instance.components.h[id] != null;
		} else {
			return false;
		}
	}
	,isRequire: function(c) {
		return View_$Main_$Position_$Main_$Velocity.__mask.h[c] != null;
	}
	,toString: function() {
		return "Main.Position,Main.Velocity";
	}
});
var echos__$Entity_Entity_$Impl_$ = {};
echos__$Entity_Entity_$Impl_$.__name__ = true;
echos__$Entity_Entity_$Impl_$.destroy = function(this1) {
	echos_Workflow.free(this1);
};
var echos_macro__$ComponentMacro_IntMapComponentContainer_$Impl_$ = {};
echos_macro__$ComponentMacro_IntMapComponentContainer_$Impl_$.__name__ = true;
echos_macro__$ComponentMacro_IntMapComponentContainer_$Impl_$._new = function() {
	return new haxe_ds_IntMap();
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = true;
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var __map_reserved = {};
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = "Date";
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
echos_Workflow.__nextEntityId = 0;
echos_Workflow.__componentContainers = [];
echos_Workflow.cache = [];
echos_Workflow.statuses = new haxe_ds_IntMap();
echos_Workflow.entities = new haxe_ds_List();
echos_Workflow.views = new haxe_ds_List();
echos_Workflow.systems = new haxe_ds_List();
echos_Workflow.times = new haxe_ds_StringMap();
ComponentContainer_$Main_$Animal.instance = new ComponentContainer_$Main_$Animal();
ComponentContainer_$Main_$Effect.instance = new ComponentContainer_$Main_$Effect();
ComponentContainer_$Main_$Position.instance = new ComponentContainer_$Main_$Position();
ComponentContainer_$Main_$Sprite.instance = new ComponentContainer_$Main_$Sprite();
ComponentContainer_$Main_$Velocity.instance = new ComponentContainer_$Main_$Velocity();
Main.GRASS = ["🌾","🌿"];
Main.TREE = ["🌲","🌳"];
Main.FLOWER = ["🌻","🥀","🌹","🌷"];
Main.MEAT = ["🥩","🍗","🍖"];
Info.__meta__ = { fields : { print : { u : null}}};
Info.eaten = 0;
Effects.__meta__ = { fields : { update : { u : null}}};
View_$Main_$Animal_$Main_$Position.instance = new View_$Main_$Animal_$Main_$Position();
View_$Main_$Animal_$Main_$Position.__mask = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[1] = true;
	_g.h[2] = true;
	$r = _g;
	return $r;
}(this));
View_$Main_$Effect.instance = new View_$Main_$Effect();
View_$Main_$Effect.__mask = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[0] = true;
	$r = _g;
	return $r;
}(this));
View_$Main_$Position_$Main_$Sprite.instance = new View_$Main_$Position_$Main_$Sprite();
View_$Main_$Position_$Main_$Sprite.__mask = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[2] = true;
	_g.h[3] = true;
	$r = _g;
	return $r;
}(this));
View_$Main_$Position_$Main_$Sprite_$Main_$Velocity.instance = new View_$Main_$Position_$Main_$Sprite_$Main_$Velocity();
View_$Main_$Position_$Main_$Sprite_$Main_$Velocity.__mask = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[4] = true;
	_g.h[2] = true;
	_g.h[3] = true;
	$r = _g;
	return $r;
}(this));
View_$Main_$Position_$Main_$Velocity.instance = new View_$Main_$Position_$Main_$Velocity();
View_$Main_$Position_$Main_$Velocity.__mask = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[2] = true;
	_g.h[4] = true;
	$r = _g;
	return $r;
}(this));
Main.main();
})();
